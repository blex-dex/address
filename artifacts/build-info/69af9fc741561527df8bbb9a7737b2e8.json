{"id":"69af9fc741561527df8bbb9a7737b2e8","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"contracts/datastream/OrderLiqStreamsUpkeep.sol":{"content":"// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.0;\n\n// import {Log} from \"chainlink_8_contracts/src/v0.8/automation/interfaces/ILogAutomation.sol\";\n// import {IMarket} from \"../interfaces/market/IMarket.sol\";\n// import {StreamsUpkeepBase} from \"./StreamsUpkeepBase.sol\";\n// import {AMLib} from \"./AMLib.sol\";\n// import {Order} from \"../interfaces/order/OrderStruct.sol\";\n\n// contract OrderLiqStreamsUpkeep is StreamsUpkeepBase {\n//     // ==================================sepolia checkdata eth==================================\n//     // market: 0xd9CD2FEAF3453d8cA9b26E1F17F583b414B4A2b8\n//     // checkData: 0x000000000000000000000000d9cd2feaf3453d8ca9b26e1f17f583b414b4a2b8\n\n//     // ==================================Event ABI==================================\n//     /**\n//     {\n//         \"anonymous\": false,\n//         \"inputs\": [\n//         {\n//             \"indexed\": true,\n//             \"internalType\": \"int256\",\n//             \"name\": \"current\",\n//             \"type\": \"int256\"\n//         },\n//         {\n//             \"indexed\": true,\n//             \"internalType\": \"uint256\",\n//             \"name\": \"roundId\",\n//             \"type\": \"uint256\"\n//         },\n//         {\n//             \"indexed\": false,\n//             \"internalType\": \"uint256\",\n//             \"name\": \"updatedAt\",\n//             \"type\": \"uint256\"\n//         }\n//         ],\n//         \"name\": \"AnswerUpdated\",\n//         \"type\": \"event\"\n//     }\n//      */\n\n//     /**\n//      * @dev Checks the log for upkeep necessity based on provided data.\n//      * @param log The Log struct containing relevant data.(AnswerUpdated(int256 indexed answer, etc...))\n//      * @param checkData The data for market address (fill in the market address, isLong, lower, upper).\n//      * @return upkeepNeeded A boolean indicating if upkeep is needed.\n//      * @return performData The data required for performing upkeep.\n//      */\n//     function checkLog(\n//         Log calldata log,\n//         bytes memory checkData\n//     )\n//         external\n//         override\n//         returns (bool /* upkeepNeeded */, bytes memory /* performData */)\n//     {\n//         CheckCallbackCache memory c;\n//         (c.market) = abi.decode(checkData, (address));\n//         if (log.source == IMarket(c.market).marketRouter())\n//             c.logType = uint8(LogType.MarketLog);\n//         else c.logType = logType[log.source];\n//         string[] memory _feedIds = new string[](1);\n//         _feedIds[0] = feedId[c.market];\n//         c.chainPrice = new uint256[](2);\n//         for (uint256 index = 0; index < 2; index++)\n//             c.chainPrice[index] = AMLib.cp(c.market).getPrice(\n//                 IMarket(c.market).indexToken(),\n//                 index == 1\n//             );\n//         revert StreamsLookup(\n//             DATASTREAMS_FEEDLABEL, //feedParamKey\n//             _feedIds, //feeds\n//             DATASTREAMS_QUERYLABEL, //timeParamKey\n//             log.timestamp, //time\n//             abi.encode(c)\n//         );\n//     }\n\n//     function getPrice(\n//         BasicReport memory mockVerifiedReport,\n//         CheckCallbackCache memory c,\n//         bool isMax\n//     ) internal view returns (uint256 myPrice) {\n//         myPrice = convertToUSDTPrice(\n//             c.market,\n//             formatPrice(mockVerifiedReport.price)\n//         );\n//         uint256 chainPrice = c.chainPrice[isMax ? 1 : 0];\n//         if (isMax == (myPrice < chainPrice)) myPrice = chainPrice;\n//     }\n\n//     function _checkCallbackOrders(\n//         BasicReport memory mockVerifiedReport,\n//         CheckCallbackCache memory c\n//     ) internal view returns (bool upkeepNeeded) {\n//         for (uint isLong = 0; isLong < 2; isLong++) {\n//             for (uint isIncrease = 0; isIncrease < 2; isIncrease++) {\n//                 uint256 myPrice = getPrice(\n//                     mockVerifiedReport,\n//                     c,\n//                     isLong == isIncrease\n//                 );\n//                 Order.Props[] memory execOrders = (\n//                     isLong == 1\n//                         ? IMarket(c.market).orderBookLong()\n//                         : IMarket(c.market).orderBookShort()\n//                 ).getExecutableOrdersByPrice(\n//                         LOWER,\n//                         UPPER,\n//                         isIncrease == 1,\n//                         myPrice\n//                     );\n//                 if (execOrders.length > 0) return true;\n//             }\n//         }\n//     }\n\n//     function _checkCallbackLiq(\n//         BasicReport memory mockVerifiedReport,\n//         CheckCallbackCache memory c\n//     ) internal view returns (bool upkeepNeeded) {\n//         for (uint isLong = 0; isLong < 2; isLong++) {\n//             // Get the position keys from the market\n//             address[] memory _keys = IMarket(c.market)\n//                 .positionBook()\n//                 .getPositionKeys(LOWER, UPPER, isLong == 1);\n//             uint256 price = getPrice(mockVerifiedReport, c, isLong == 0);\n//             // Iterate through the position keys to check liquidation status\n//             for (uint256 i; i < _keys.length; i++) {\n//                 // Check if the position should be liquidated\n//                 uint256 state = _isLiquidate(\n//                     _keys[i],\n//                     c.market,\n//                     isLong == 1,\n//                     price\n//                 );\n//                 if (state != 0) return true;\n//             }\n//         }\n//     }\n\n//     /**\n//      * @dev Function to check callback data and trigger upkeep.\n//      * @param signedReports Array of signed reports.\n//      * @param extraData Extra data from checkLog.\n//      * @return upkeepNeeded Boolean indicating if upkeep is needed.\n//      * @return performData Bytes containing perform data if upkeep is needed.\n//      */\n//     function checkCallback(\n//         bytes[] calldata signedReports, //signedReports\n//         bytes calldata extraData //extraData from checkLog\n//     )\n//         external\n//         view\n//         override\n//         returns (bool upkeepNeeded, bytes memory performData)\n//     {\n//         BasicReport memory mockVerifiedReport = abi.decode(\n//             mockVerify(signedReports[0]), // Verify the first signed report\n//             (BasicReport)\n//         );\n//         CheckCallbackCache memory c = abi.decode(\n//             extraData, // Decode extraData\n//             (CheckCallbackCache)\n//         );\n//         performData = abi.encode(signedReports, c.market);\n\n//         if (c.logType == uint8(LogType.MarketLog)) {\n//             upkeepNeeded = true;\n//         } else {\n//             upkeepNeeded = _checkCallbackOrders(mockVerifiedReport, c);\n//             if (!upkeepNeeded)\n//                 upkeepNeeded = _checkCallbackLiq(mockVerifiedReport, c);\n//         }\n//     }\n\n//     function performUpkeep(bytes calldata performData) external override {\n//         (bytes[] memory signedReports, address market) = abi.decode(\n//             performData,\n//             (bytes[], address)\n//         );\n//         bytes memory unverifiedReport = signedReports[0];\n//         BasicReport memory verifiedReport = abi.decode(\n//             mockVerify(unverifiedReport),\n//             (BasicReport)\n//         );\n//         setPriceWithUSDT(market, verifiedReport);\n//     }\n// }\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"\n--> contracts/datastream/OrderLiqStreamsUpkeep.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.17;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/datastream/OrderLiqStreamsUpkeep.sol","start":-1},"type":"Warning"}],"sources":{"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[18]},"id":19,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":18,"linearizedBaseContracts":[18],"name":"AutomationCompatibleInterface","nameLocation":"67:29:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"101:985:0","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:0","nodeType":"VariableDeclaration","scope":11,"src":"1110:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:0","nodeType":"VariableDeclaration","scope":11,"src":"1154:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"performData","nameLocation":"1186:11:0","nodeType":"VariableDeclaration","scope":11,"src":"1173:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:0"},"scope":18,"src":"1089:110:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"1203:1003:0","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"performData","nameLocation":"2247:11:0","nodeType":"VariableDeclaration","scope":17,"src":"2232:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2268:0:0"},"scope":18,"src":"2209:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":19,"src":"57:2214:0","usedErrors":[]}],"src":"32:2240:0"},"id":0},"contracts/datastream/OrderLiqStreamsUpkeep.sol":{"ast":{"absolutePath":"contracts/datastream/OrderLiqStreamsUpkeep.sol","exportedSymbols":{},"id":20,"license":"MIT","nodeType":"SourceUnit","nodes":[],"src":"7389:0:1"},"id":1}},"contracts":{"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"chainlink_8_contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b738dba680a6fbc4afc85819743f13f5b7f4790ec8634c9894e1160327b11b6e\",\"dweb:/ipfs/Qmbv3euvQppeBm2g61khcJSRMZWi78xUWzbnjKAvDBnka4\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}}}}}